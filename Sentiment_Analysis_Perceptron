{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a5f6b2aa",
   "metadata": {
    "papermill": {
     "duration": 0.00866,
     "end_time": "2025-08-18T01:19:06.446872",
     "exception": false,
     "start_time": "2025-08-18T01:19:06.438212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Basic Definitions\n",
    "**Corpus**:\n",
    "Collection of all words in a dataset, when whole dataset is concatenated.\n",
    "\n",
    "**Vocabulary**:\n",
    "Collection of all unique words from the corpus.\n",
    "\n",
    "**Document**:\n",
    "A single instance of the dataset. In this case, a single review.\n",
    "\n",
    "**word**: \n",
    "single word"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da9185ec",
   "metadata": {
    "papermill": {
     "duration": 0.007342,
     "end_time": "2025-08-18T01:19:06.462065",
     "exception": false,
     "start_time": "2025-08-18T01:19:06.454723",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8625263a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:06.479114Z",
     "iopub.status.busy": "2025-08-18T01:19:06.478809Z",
     "iopub.status.idle": "2025-08-18T01:19:06.484980Z",
     "shell.execute_reply": "2025-08-18T01:19:06.483872Z"
    },
    "papermill": {
     "duration": 0.017454,
     "end_time": "2025-08-18T01:19:06.487037",
     "exception": false,
     "start_time": "2025-08-18T01:19:06.469583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install pyspellchecker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fe021605",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:06.505310Z",
     "iopub.status.busy": "2025-08-18T01:19:06.504994Z",
     "iopub.status.idle": "2025-08-18T01:19:10.627670Z",
     "shell.execute_reply": "2025-08-18T01:19:10.626207Z"
    },
    "papermill": {
     "duration": 4.133705,
     "end_time": "2025-08-18T01:19:10.630020",
     "exception": false,
     "start_time": "2025-08-18T01:19:06.496315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import string\n",
    "# import spacy\n",
    "# from spellchecker import SpellChecker\n",
    "import ast\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9f61ddd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.647718Z",
     "iopub.status.busy": "2025-08-18T01:19:10.647141Z",
     "iopub.status.idle": "2025-08-18T01:19:10.652220Z",
     "shell.execute_reply": "2025-08-18T01:19:10.651181Z"
    },
    "papermill": {
     "duration": 0.015808,
     "end_time": "2025-08-18T01:19:10.653913",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.638105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df = pd.read_csv('/kaggle/input/imdb-reviews/reviews.csv')\n",
    "# df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65cff0d5",
   "metadata": {
    "papermill": {
     "duration": 0.007566,
     "end_time": "2025-08-18T01:19:10.669248",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.661682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "784abcbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.685536Z",
     "iopub.status.busy": "2025-08-18T01:19:10.685181Z",
     "iopub.status.idle": "2025-08-18T01:19:10.689347Z",
     "shell.execute_reply": "2025-08-18T01:19:10.688451Z"
    },
    "papermill": {
     "duration": 0.014431,
     "end_time": "2025-08-18T01:19:10.691070",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.676639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# all_punc = string.punctuation\n",
    "# all_punc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "030523e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.708895Z",
     "iopub.status.busy": "2025-08-18T01:19:10.707951Z",
     "iopub.status.idle": "2025-08-18T01:19:10.712747Z",
     "shell.execute_reply": "2025-08-18T01:19:10.711861Z"
    },
    "papermill": {
     "duration": 0.014891,
     "end_time": "2025-08-18T01:19:10.714358",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.699467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# nlp = spacy.load(\"en_core_web_sm\", disable=[\"parser\", \"ner\", \"textcat\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "94b03666",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.731132Z",
     "iopub.status.busy": "2025-08-18T01:19:10.730804Z",
     "iopub.status.idle": "2025-08-18T01:19:10.736637Z",
     "shell.execute_reply": "2025-08-18T01:19:10.735566Z"
    },
    "papermill": {
     "duration": 0.01614,
     "end_time": "2025-08-18T01:19:10.738314",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.722174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# clearning\n",
    "# def clean_data(text):\n",
    "#     # lowercasing\n",
    "#     text = text.lower()\n",
    "\n",
    "#     # html tags\n",
    "#     text = re.sub(r'<.*?>', '', text)\n",
    "\n",
    "#     # urls\n",
    "#     text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n",
    "\n",
    "#     # punctuations\n",
    "#     text = text.translate(str.maketrans('', '', all_punc))\n",
    "\n",
    "#     # don't require chat word treatment\n",
    "#     # spelling correction\n",
    "#     blob = TextBlob(text)\n",
    "#     text = str(blob.correct())\n",
    "\n",
    "#     # skemming / lemmatization, I will be using lemmatization slower but accurate\n",
    "#     # tokenization + removing stop words + lemmatization\n",
    "#     doc = nlp(text)\n",
    "#     text = [w.lemma_ for w in doc if not w.is_stop]\n",
    "\n",
    "#     # no need to handle emojis\n",
    "\n",
    "#     return text\n",
    "\n",
    "# spell = SpellChecker()\n",
    "\n",
    "# # precompiled regex\n",
    "# CLEAN_RE = re.compile(r\"<.*?>|https?://\\S+|www\\.\\S+|[^a-zA-Z\\s]\")\n",
    "\n",
    "# def clean_data(text):\n",
    "#     # lowercase\n",
    "#     text = text.lower()\n",
    "\n",
    "#     # remove html, urls, and punctuations in one go\n",
    "#     text = CLEAN_RE.sub(\" \", text)\n",
    "\n",
    "#     # optional: fast spell correction (way faster than TextBlob)\n",
    "#     words = text.split()\n",
    "#     corrected = [spell.correction(w) or w for w in words]\n",
    "#     text = \" \".join(corrected)\n",
    "\n",
    "#     # spacy pipeline: tokenization + stopword removal + lemmatization\n",
    "#     doc = nlp(text)\n",
    "#     return [token.lemma_ for token in doc if not token.is_stop and token.lemma_.strip()]\n",
    "\n",
    "# # sent = df['text'][0]\n",
    "# # sent = '<h1>This is me </h1>'\n",
    "# # sent = 'www.abc.com'\n",
    "# sent = 'I am a good plyer'\n",
    "# print(clean_data(sent))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4c539cd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.755429Z",
     "iopub.status.busy": "2025-08-18T01:19:10.755089Z",
     "iopub.status.idle": "2025-08-18T01:19:10.759480Z",
     "shell.execute_reply": "2025-08-18T01:19:10.758505Z"
    },
    "papermill": {
     "duration": 0.01509,
     "end_time": "2025-08-18T01:19:10.761139",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.746049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df['text'] = df['text'].apply(clean_data)\n",
    "# df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0ff30f9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.777997Z",
     "iopub.status.busy": "2025-08-18T01:19:10.777192Z",
     "iopub.status.idle": "2025-08-18T01:19:10.782121Z",
     "shell.execute_reply": "2025-08-18T01:19:10.781002Z"
    },
    "papermill": {
     "duration": 0.015119,
     "end_time": "2025-08-18T01:19:10.783843",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.768724",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df.to_csv('pre_processed.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82b9b145",
   "metadata": {
    "papermill": {
     "duration": 0.006976,
     "end_time": "2025-08-18T01:19:10.798111",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.791135",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Text Representation\n",
    "## Popular method\n",
    "* One-Hot-Encoding : Easy to implement but have many problems\n",
    "* Bag-of-Words : A better approach which solve many problems related to One-Hot-Encoder\n",
    "* N-Grams : Superset of BOW, instead of one word at a time, takes N words.\n",
    "* TF-IDF : Alternative to BOW, preservs a better semantic information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bcc956fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:10.814549Z",
     "iopub.status.busy": "2025-08-18T01:19:10.814203Z",
     "iopub.status.idle": "2025-08-18T01:19:11.431017Z",
     "shell.execute_reply": "2025-08-18T01:19:11.430058Z"
    },
    "papermill": {
     "duration": 0.62706,
     "end_time": "2025-08-18T01:19:11.432659",
     "exception": false,
     "start_time": "2025-08-18T01:19:10.805599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                                                    text  label\n",
       " 23410  ['henry', 'fonda', 'brilliantly', 'capture', '...      0\n",
       " 2939   ['think', 'stoned', 'age', 'bad', 'film', 'wro...      1\n",
       " 4354   ['d', 'like', 'excuse', 'bad', 'english', 'm',...      1\n",
       " 15497  ['think', 'dark', 'version', 'kid', 'show', 'p...      1\n",
       " 11997  ['tongue', 'cheek', 'movie', 'outset', 'voice'...      0,\n",
       " Index(['text', 'label'], dtype='object'))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading the processed data\n",
    "df = pd.read_csv('/kaggle/input/processed-imdb-reviews/pre_processed.csv')\n",
    "df = df.drop('Unnamed: 0', axis=1)\n",
    "df.sample(5), df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd717c7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:11.449851Z",
     "iopub.status.busy": "2025-08-18T01:19:11.449525Z",
     "iopub.status.idle": "2025-08-18T01:19:17.107089Z",
     "shell.execute_reply": "2025-08-18T01:19:17.106009Z"
    },
    "papermill": {
     "duration": 5.668482,
     "end_time": "2025-08-18T01:19:17.108881",
     "exception": false,
     "start_time": "2025-08-18T01:19:11.440399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3845     [hear, leo, carat, mere, segment, year, tokyo,...\n",
       "13480    [metamorphic, story, dash, young, scientist, r...\n",
       "8251     [able, enjoy, mock, movie, surprising, barely,...\n",
       "24481    [write, wind, douglas, sick, s, melodrama, dou...\n",
       "20499    [ok, think, kind, cute, kind, lesson, involve,...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text'] = df['text'].apply(ast.literal_eval)\n",
    "df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5ec216e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:17.127307Z",
     "iopub.status.busy": "2025-08-18T01:19:17.126943Z",
     "iopub.status.idle": "2025-08-18T01:19:17.131516Z",
     "shell.execute_reply": "2025-08-18T01:19:17.130654Z"
    },
    "papermill": {
     "duration": 0.015707,
     "end_time": "2025-08-18T01:19:17.133150",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.117443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# we don't need to do thi manually\n",
    "# corpus = df['text'].apply(lambda x : ' '.join(x)).to_list()\n",
    "# corpus = ','.join(corpus)\n",
    "# corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "40db09f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:17.248213Z",
     "iopub.status.busy": "2025-08-18T01:19:17.247903Z",
     "iopub.status.idle": "2025-08-18T01:19:17.251989Z",
     "shell.execute_reply": "2025-08-18T01:19:17.251183Z"
    },
    "papermill": {
     "duration": 0.112696,
     "end_time": "2025-08-18T01:19:17.253650",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.140954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# we don't need to do thi manually\n",
    "# vocabulary = list(set(corpus.split()))\n",
    "# len(vocabulary)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138e6330",
   "metadata": {
    "papermill": {
     "duration": 0.007385,
     "end_time": "2025-08-18T01:19:17.269036",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.261651",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a63f93e",
   "metadata": {
    "papermill": {
     "duration": 0.007675,
     "end_time": "2025-08-18T01:19:17.285287",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.277612",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## One-Hot Encoding\n",
    "$\\text{To convert this into One-Hot-Encoding we will have to do the following.}$\n",
    "* Label each word in the vocabulary as [1 0 ... 0], [0 1 0 ... 0], ...\n",
    "* This will make our data too much sparse.\n",
    "* Since all the **documents** has different number of words, we will not be able to use this method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e33a8cd5",
   "metadata": {
    "papermill": {
     "duration": 0.00725,
     "end_time": "2025-08-18T01:19:17.301113",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.293863",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "## Bag of Words\n",
    "To convert this into bag-of-words (BOW) encoding we will have to do the following.\n",
    "* We will give an index to each word in our vocabulary.\n",
    "* Now our every document will be of length `len(vocabulary)` .\n",
    "* We will basically count the number of occurences of each word from 0 to `len(vocabular)`.\n",
    "* If any word is not present then we skip it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b62e61a2",
   "metadata": {
    "papermill": {
     "duration": 0.007372,
     "end_time": "2025-08-18T01:19:17.316164",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.308792",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Many text processing steps can be skipped since the sklearn's CountVectorizer does it for us. But there is no harm in doing it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d0512cb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:17.332856Z",
     "iopub.status.busy": "2025-08-18T01:19:17.332510Z",
     "iopub.status.idle": "2025-08-18T01:19:17.517712Z",
     "shell.execute_reply": "2025-08-18T01:19:17.516583Z"
    },
    "papermill": {
     "duration": 0.195524,
     "end_time": "2025-08-18T01:19:17.519391",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.323867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4003     movie controversial gentle near perfect struct...\n",
       "22385    time movie wish beat death reason endure entir...\n",
       "11556    vonnegut s well know work definite interesting...\n",
       "1963     superb aachen remake gujarati play come want l...\n",
       "17836    agree taximeter fantastic film see wide audien...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text'] = df['text'].apply(lambda x : ' '.join(x))\n",
    "df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8caff658",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:17.536741Z",
     "iopub.status.busy": "2025-08-18T01:19:17.535772Z",
     "iopub.status.idle": "2025-08-18T01:19:19.928788Z",
     "shell.execute_reply": "2025-08-18T01:19:19.927768Z"
    },
    "papermill": {
     "duration": 2.403445,
     "end_time": "2025-08-18T01:19:19.930607",
     "exception": false,
     "start_time": "2025-08-18T01:19:17.527162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "vectorizer = CountVectorizer()\n",
    "\n",
    "X = vectorizer.fit_transform(df['text'])\n",
    "\n",
    "# print(vectorizer.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e2fc8f98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:19.946902Z",
     "iopub.status.busy": "2025-08-18T01:19:19.946587Z",
     "iopub.status.idle": "2025-08-18T01:19:23.872444Z",
     "shell.execute_reply": "2025-08-18T01:19:23.871348Z"
    },
    "papermill": {
     "duration": 3.936093,
     "end_time": "2025-08-18T01:19:23.874248",
     "exception": false,
     "start_time": "2025-08-18T01:19:19.938155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n"
     ]
    }
   ],
   "source": [
    "X = X.toarray() # out input data is ready in R^{d} form\n",
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f028ec0",
   "metadata": {
    "papermill": {
     "duration": 0.007819,
     "end_time": "2025-08-18T01:19:23.890720",
     "exception": false,
     "start_time": "2025-08-18T01:19:23.882901",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can use CountVectorizer to create BOW as well as N-gram representation for us."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a1fe5c8",
   "metadata": {
    "papermill": {
     "duration": 0.007783,
     "end_time": "2025-08-18T01:19:23.906283",
     "exception": false,
     "start_time": "2025-08-18T01:19:23.898500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## TF-IDF representation\n",
    "To convert this into TF-IDF encoding we will have to do the following.\n",
    "\n",
    "* we will have represention vector for each document of size `len(vocabular`.\n",
    "* We will calculate the tf-idf of every word in vocabulary for each document."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0f8bcf41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:23.923860Z",
     "iopub.status.busy": "2025-08-18T01:19:23.923021Z",
     "iopub.status.idle": "2025-08-18T01:19:34.142866Z",
     "shell.execute_reply": "2025-08-18T01:19:34.142001Z"
    },
    "papermill": {
     "duration": 10.23043,
     "end_time": "2025-08-18T01:19:34.144658",
     "exception": false,
     "start_time": "2025-08-18T01:19:23.914228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "tf_vectorizer = TfidfVectorizer()\n",
    "X2 = tf_vectorizer.fit_transform(df['text'])\n",
    "X2 = X2.toarray()\n",
    "print(X2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9ba297d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.162188Z",
     "iopub.status.busy": "2025-08-18T01:19:34.161867Z",
     "iopub.status.idle": "2025-08-18T01:19:34.167800Z",
     "shell.execute_reply": "2025-08-18T01:19:34.166725Z"
    },
    "papermill": {
     "duration": 0.016693,
     "end_time": "2025-08-18T01:19:34.169515",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.152822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.076753433801274\n"
     ]
    }
   ],
   "source": [
    "print(X2[0].sum()) # so there are values in between"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82c27f29",
   "metadata": {
    "papermill": {
     "duration": 0.007416,
     "end_time": "2025-08-18T01:19:34.184941",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.177525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "24d571cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.201606Z",
     "iopub.status.busy": "2025-08-18T01:19:34.201169Z",
     "iopub.status.idle": "2025-08-18T01:19:34.229870Z",
     "shell.execute_reply": "2025-08-18T01:19:34.228752Z"
    },
    "papermill": {
     "duration": 0.038933,
     "end_time": "2025-08-18T01:19:34.231389",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.192456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9410</th>\n",
       "      <td>go watch movie know t go great witness awful w...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24608</th>\n",
       "      <td>storyline soprano engage audience think bring ...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11844</th>\n",
       "      <td>movie provocative jesus movie see seek tell st...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22182</th>\n",
       "      <td>like movie go time week ms deter nail performa...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10643</th>\n",
       "      <td>arguably al pacino s good role play tony monta...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  label\n",
       "9410   go watch movie know t go great witness awful w...      1\n",
       "24608  storyline soprano engage audience think bring ...     -1\n",
       "11844  movie provocative jesus movie see seek tell st...     -1\n",
       "22182  like movie go time week ms deter nail performa...     -1\n",
       "10643  arguably al pacino s good role play tony monta...     -1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'] = df['label'].apply(lambda x : -1 if x == 0 else 1)\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fcf5e62c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.247970Z",
     "iopub.status.busy": "2025-08-18T01:19:34.247678Z",
     "iopub.status.idle": "2025-08-18T01:19:34.253465Z",
     "shell.execute_reply": "2025-08-18T01:19:34.252351Z"
    },
    "papermill": {
     "duration": 0.015877,
     "end_time": "2025-08-18T01:19:34.254934",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.239057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1  1  1 ...  1  1 -1]\n"
     ]
    }
   ],
   "source": [
    "Y = df['label'].values\n",
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b6a3b85f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.272067Z",
     "iopub.status.busy": "2025-08-18T01:19:34.271698Z",
     "iopub.status.idle": "2025-08-18T01:19:34.278044Z",
     "shell.execute_reply": "2025-08-18T01:19:34.277015Z"
    },
    "papermill": {
     "duration": 0.016501,
     "end_time": "2025-08-18T01:19:34.279485",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.262984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total rows after BOW  25000\n",
      "Representation size of each document after BOW  41824\n",
      "Total rows after TF-IDF  25000\n",
      "Representation size of each document TF-IDF  41824\n",
      "Total rows in labels  25000\n"
     ]
    }
   ],
   "source": [
    "print(\"Total rows after BOW \", len(X))\n",
    "print(\"Representation size of each document after BOW \", len(X[0]))\n",
    "print(\"Total rows after TF-IDF \", len(X2))\n",
    "print(\"Representation size of each document TF-IDF \", len(X2[0]))\n",
    "print(\"Total rows in labels \", len(Y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eb9e822",
   "metadata": {
    "papermill": {
     "duration": 0.007504,
     "end_time": "2025-08-18T01:19:34.294729",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.287225",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The actual vocabulary is of size around ~63k, but it is here ~42k because during the procedure, words with less frequency were removed.\n",
    "* There is a threshold which we can pass to control the frequency."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d397dc1a",
   "metadata": {
    "papermill": {
     "duration": 0.007508,
     "end_time": "2025-08-18T01:19:34.309985",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.302477",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c3532de4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.328043Z",
     "iopub.status.busy": "2025-08-18T01:19:34.327083Z",
     "iopub.status.idle": "2025-08-18T01:19:34.339604Z",
     "shell.execute_reply": "2025-08-18T01:19:34.338616Z"
    },
    "papermill": {
     "duration": 0.023468,
     "end_time": "2025-08-18T01:19:34.341254",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.317786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "-1    12500\n",
       " 1    12500\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6dc2223f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.358873Z",
     "iopub.status.busy": "2025-08-18T01:19:34.358496Z",
     "iopub.status.idle": "2025-08-18T01:19:34.565131Z",
     "shell.execute_reply": "2025-08-18T01:19:34.564236Z"
    },
    "papermill": {
     "duration": 0.217485,
     "end_time": "2025-08-18T01:19:34.566772",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.349287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df, x='label')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d1d9781",
   "metadata": {
    "papermill": {
     "duration": 0.007793,
     "end_time": "2025-08-18T01:19:34.582892",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.575099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The labels are equally distributed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d141d03",
   "metadata": {
    "papermill": {
     "duration": 0.007839,
     "end_time": "2025-08-18T01:19:34.598783",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.590944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "175bf08b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:34.616910Z",
     "iopub.status.busy": "2025-08-18T01:19:34.616528Z",
     "iopub.status.idle": "2025-08-18T01:19:40.734159Z",
     "shell.execute_reply": "2025-08-18T01:19:40.733093Z"
    },
    "papermill": {
     "duration": 6.129327,
     "end_time": "2025-08-18T01:19:40.736197",
     "exception": false,
     "start_time": "2025-08-18T01:19:34.606870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, Y, test_size=0.2, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4cc5002f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:40.755242Z",
     "iopub.status.busy": "2025-08-18T01:19:40.754788Z",
     "iopub.status.idle": "2025-08-18T01:19:40.759882Z",
     "shell.execute_reply": "2025-08-18T01:19:40.758829Z"
    },
    "papermill": {
     "duration": 0.016512,
     "end_time": "2025-08-18T01:19:40.761606",
     "exception": false,
     "start_time": "2025-08-18T01:19:40.745094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X2_train, X2_test, y2_train, y2_test = train_test_split(\n",
    "#     X2, Y, test_size=0.2, random_state=42\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a545141a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:40.780026Z",
     "iopub.status.busy": "2025-08-18T01:19:40.779625Z",
     "iopub.status.idle": "2025-08-18T01:19:40.786250Z",
     "shell.execute_reply": "2025-08-18T01:19:40.784908Z"
    },
    "papermill": {
     "duration": 0.018271,
     "end_time": "2025-08-18T01:19:40.788363",
     "exception": false,
     "start_time": "2025-08-18T01:19:40.770092",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train size: 20000\n",
      "Test size: 5000\n",
      "Training labels:\n",
      " [-1  1  1 ... -1 -1  1]\n"
     ]
    }
   ],
   "source": [
    "print(\"Train size:\", len(X_train))\n",
    "print(\"Test size:\", len(X_test))\n",
    "print(\"Training labels:\\n\", y_train)\n",
    "\n",
    "# print(\"Train size:\", len(X2_train))\n",
    "# print(\"Test size:\", len(X2_test))\n",
    "# print(\"Training labels:\\n\", y2_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f4ce627a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:40.807798Z",
     "iopub.status.busy": "2025-08-18T01:19:40.807469Z",
     "iopub.status.idle": "2025-08-18T01:19:40.978466Z",
     "shell.execute_reply": "2025-08-18T01:19:40.977344Z"
    },
    "papermill": {
     "duration": 0.182592,
     "end_time": "2025-08-18T01:19:40.980042",
     "exception": false,
     "start_time": "2025-08-18T01:19:40.797450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "values, counts = np.unique(y_train, return_counts=True)\n",
    "\n",
    "plt.bar(values, counts)\n",
    "plt.xlabel(\"Number\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Frequency of Numbers in Vector\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "76d0571f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:40.999312Z",
     "iopub.status.busy": "2025-08-18T01:19:40.998909Z",
     "iopub.status.idle": "2025-08-18T01:19:41.006398Z",
     "shell.execute_reply": "2025-08-18T01:19:41.005341Z"
    },
    "papermill": {
     "duration": 0.018915,
     "end_time": "2025-08-18T01:19:41.007991",
     "exception": false,
     "start_time": "2025-08-18T01:19:40.989076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([-1,  1]), array([ 9971, 10029]))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values, counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5d163f3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:41.027003Z",
     "iopub.status.busy": "2025-08-18T01:19:41.026635Z",
     "iopub.status.idle": "2025-08-18T01:19:41.032057Z",
     "shell.execute_reply": "2025-08-18T01:19:41.030673Z"
    },
    "papermill": {
     "duration": 0.017057,
     "end_time": "2025-08-18T01:19:41.033790",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.016733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# values, counts = np.unique(y2_train, return_counts=True)\n",
    "\n",
    "# plt.bar(values, counts)\n",
    "# plt.xlabel(\"Number\")\n",
    "# plt.ylabel(\"Count\")\n",
    "# plt.title(\"Frequency of Numbers in Vector\")\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c6cab0eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:41.053799Z",
     "iopub.status.busy": "2025-08-18T01:19:41.053368Z",
     "iopub.status.idle": "2025-08-18T01:19:41.058641Z",
     "shell.execute_reply": "2025-08-18T01:19:41.057252Z"
    },
    "papermill": {
     "duration": 0.017788,
     "end_time": "2025-08-18T01:19:41.060546",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.042758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(values, counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e50607a5",
   "metadata": {
    "papermill": {
     "duration": 0.008435,
     "end_time": "2025-08-18T01:19:41.078077",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.069642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since train have similar distribution and initially they were equal thus test will also have equal distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aff63e07",
   "metadata": {
    "papermill": {
     "duration": 0.008366,
     "end_time": "2025-08-18T01:19:41.095952",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.087586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7906c26d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:41.115704Z",
     "iopub.status.busy": "2025-08-18T01:19:41.114898Z",
     "iopub.status.idle": "2025-08-18T01:19:41.151150Z",
     "shell.execute_reply": "2025-08-18T01:19:41.150103Z"
    },
    "papermill": {
     "duration": 0.0482,
     "end_time": "2025-08-18T01:19:41.152935",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.104735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "# from numpy.lib.stride_tricks import as_strided\n",
    "\n",
    "# def batched_view(X_train, y_train, batch_size):\n",
    "#     \"\"\"\n",
    "#     Create a zero-copy view of `arr` grouped into batches of size `batch_size`.\n",
    "#     Drops the last incomplete batch.\n",
    "#     \"\"\"\n",
    "#     n_batches = len(X_train) // batch_size  # how many full batches\n",
    "#     new_shape = (n_batches, batch_size) + arr.shape[1:]   # (batches, batch_size, features...)\n",
    "#     new_strides = (batch_size * X_train.strides[0],) + X_train.strides\n",
    "    \n",
    "#     return as_strided(X_train, shape=new_shape, strides=new_strides), as_strided(y_train, shape=new_shape, strides=new_strides)\n",
    "\n",
    "def train_perceptron(X_train, y_train, X_test, y_test, n_epochs=1000):\n",
    "    # X_train = np.hstack([X_train, np.ones((len(X_train), 1), dtype=int)])\n",
    "    # weight initialization\n",
    "    W = np.zeros(len(X_train[0]) + 1)\n",
    "\n",
    "    train_accs = []\n",
    "    test_accs = []\n",
    "    losses = []\n",
    "    \n",
    "    pbar = tqdm(range(n_epochs))\n",
    "    for epoch in pbar:\n",
    "\n",
    "        # training\n",
    "        total_corr = 0\n",
    "        total_loss = 0\n",
    "        for i in range(len(X_train)):\n",
    "            x = np.append(X_train[i], 1)\n",
    "            y_pred = np.dot(x, W)\n",
    "\n",
    "            y_pred = -1 if y_pred < 0 else 1\n",
    "            \n",
    "            if y_pred != y_train[i]:\n",
    "                W += np.dot(x, y_train[i])\n",
    "                total_loss += ((y_pred - y_train[i])**2) / len(X_train)\n",
    "            else:\n",
    "                total_corr += 1\n",
    "\n",
    "        train_acc = (total_corr / len(y_train)) * 100\n",
    "        train_accs.append(train_acc)\n",
    "        losses.append(total_loss)\n",
    "\n",
    "        # testing\n",
    "        test_corr = 0\n",
    "        for i in range(len(X_test)):\n",
    "            x = np.append(X_test[i], 1)\n",
    "            \n",
    "            y_pred = np.dot(x, W)\n",
    "\n",
    "            if y_pred != y_test[i]:\n",
    "                test_corr += 1\n",
    "\n",
    "        test_acc = (test_corr / len(y_test)) * 100\n",
    "        test_accs.append(test_acc)\n",
    "\n",
    "        pbar.set_postfix({\"loss\": total_loss, \"training accuracy\" : train_acc, \"testing accuracy\" : test_acc})\n",
    "\n",
    "        if total_corr == len(y_train):\n",
    "            print(\"Training Converged\")\n",
    "            break\n",
    "\n",
    "    return losses, train_accs, test_accs\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "15428797",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:19:41.172453Z",
     "iopub.status.busy": "2025-08-18T01:19:41.172055Z",
     "iopub.status.idle": "2025-08-18T01:27:45.967067Z",
     "shell.execute_reply": "2025-08-18T01:27:45.965936Z"
    },
    "papermill": {
     "duration": 484.807003,
     "end_time": "2025-08-18T01:27:45.968926",
     "exception": false,
     "start_time": "2025-08-18T01:19:41.161923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 13%|█▎        | 127/1000 [08:04<55:32,  3.82s/it, loss=0, training accuracy=100, testing accuracy=99.8]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Converged\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# BOW training\n",
    "l1, tr1, ts1 = train_perceptron(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2cc690c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:27:46.013447Z",
     "iopub.status.busy": "2025-08-18T01:27:46.013106Z",
     "iopub.status.idle": "2025-08-18T01:27:46.437744Z",
     "shell.execute_reply": "2025-08-18T01:27:46.436487Z"
    },
    "papermill": {
     "duration": 0.449646,
     "end_time": "2025-08-18T01:27:46.439373",
     "exception": false,
     "start_time": "2025-08-18T01:27:45.989727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "epochs = np.arange(1, len(l1) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Loss subplot\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, l1, color=\"red\", linewidth=2)\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.title(\"Training Loss\")\n",
    "plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
    "\n",
    "# Accuracy subplot\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, tr1, label=\"Train Accuracy\", color=\"blue\", linewidth=2)\n",
    "plt.plot(epochs, ts1, label=\"Test Accuracy\", color=\"green\", linewidth=2)\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Training vs Testing Accuracy\")\n",
    "plt.legend()\n",
    "plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fad3323a",
   "metadata": {
    "papermill": {
     "duration": 0.022085,
     "end_time": "2025-08-18T01:27:46.484016",
     "exception": false,
     "start_time": "2025-08-18T01:27:46.461931",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data is not lineary seperable completely. The accuracy stopped increasing at some point."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8062256,
     "sourceId": 12753488,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8085842,
     "sourceId": 12789244,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 526.571232,
   "end_time": "2025-08-18T01:27:47.933345",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T01:19:01.362113",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
