{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f4d85a7",
   "metadata": {
    "papermill": {
     "duration": 0.008255,
     "end_time": "2025-08-18T01:29:57.211576",
     "exception": false,
     "start_time": "2025-08-18T01:29:57.203321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Basic Definitions\n",
    "**Corpus**:\n",
    "Collection of all words in a dataset, when whole dataset is concatenated.\n",
    "\n",
    "**Vocabulary**:\n",
    "Collection of all unique words from the corpus.\n",
    "\n",
    "**Document**:\n",
    "A single instance of the dataset. In this case, a single review.\n",
    "\n",
    "**word**: \n",
    "single word"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f7f4646",
   "metadata": {
    "papermill": {
     "duration": 0.007048,
     "end_time": "2025-08-18T01:29:57.226383",
     "exception": false,
     "start_time": "2025-08-18T01:29:57.219335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd03d9b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:29:57.242288Z",
     "iopub.status.busy": "2025-08-18T01:29:57.241931Z",
     "iopub.status.idle": "2025-08-18T01:29:57.246593Z",
     "shell.execute_reply": "2025-08-18T01:29:57.245730Z"
    },
    "papermill": {
     "duration": 0.013981,
     "end_time": "2025-08-18T01:29:57.247969",
     "exception": false,
     "start_time": "2025-08-18T01:29:57.233988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install pyspellchecker"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b10f619e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:29:57.264331Z",
     "iopub.status.busy": "2025-08-18T01:29:57.264001Z",
     "iopub.status.idle": "2025-08-18T01:30:01.124416Z",
     "shell.execute_reply": "2025-08-18T01:30:01.123534Z"
    },
    "papermill": {
     "duration": 3.870001,
     "end_time": "2025-08-18T01:30:01.126096",
     "exception": false,
     "start_time": "2025-08-18T01:29:57.256095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "import string\n",
    "# import spacy\n",
    "# from spellchecker import SpellChecker\n",
    "import ast\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d39a9cd9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.142445Z",
     "iopub.status.busy": "2025-08-18T01:30:01.141978Z",
     "iopub.status.idle": "2025-08-18T01:30:01.146116Z",
     "shell.execute_reply": "2025-08-18T01:30:01.145296Z"
    },
    "papermill": {
     "duration": 0.014195,
     "end_time": "2025-08-18T01:30:01.147581",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.133386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df = pd.read_csv('/kaggle/input/imdb-reviews/reviews.csv')\n",
    "# df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc081c62",
   "metadata": {
    "papermill": {
     "duration": 0.007414,
     "end_time": "2025-08-18T01:30:01.162149",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.154735",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5e09f8b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.177466Z",
     "iopub.status.busy": "2025-08-18T01:30:01.176813Z",
     "iopub.status.idle": "2025-08-18T01:30:01.180778Z",
     "shell.execute_reply": "2025-08-18T01:30:01.179933Z"
    },
    "papermill": {
     "duration": 0.013266,
     "end_time": "2025-08-18T01:30:01.182316",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.169050",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# all_punc = string.punctuation\n",
    "# all_punc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f8f5c675",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.198311Z",
     "iopub.status.busy": "2025-08-18T01:30:01.197980Z",
     "iopub.status.idle": "2025-08-18T01:30:01.202167Z",
     "shell.execute_reply": "2025-08-18T01:30:01.201166Z"
    },
    "papermill": {
     "duration": 0.01424,
     "end_time": "2025-08-18T01:30:01.203815",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.189575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# nlp = spacy.load(\"en_core_web_sm\", disable=[\"parser\", \"ner\", \"textcat\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ea71577",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.219779Z",
     "iopub.status.busy": "2025-08-18T01:30:01.219454Z",
     "iopub.status.idle": "2025-08-18T01:30:01.224498Z",
     "shell.execute_reply": "2025-08-18T01:30:01.223670Z"
    },
    "papermill": {
     "duration": 0.015301,
     "end_time": "2025-08-18T01:30:01.226469",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.211168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# clearning\n",
    "# def clean_data(text):\n",
    "#     # lowercasing\n",
    "#     text = text.lower()\n",
    "\n",
    "#     # html tags\n",
    "#     text = re.sub(r'<.*?>', '', text)\n",
    "\n",
    "#     # urls\n",
    "#     text = re.sub(r'https?://\\S+|www\\.\\S+', '', text)\n",
    "\n",
    "#     # punctuations\n",
    "#     text = text.translate(str.maketrans('', '', all_punc))\n",
    "\n",
    "#     # don't require chat word treatment\n",
    "#     # spelling correction\n",
    "#     blob = TextBlob(text)\n",
    "#     text = str(blob.correct())\n",
    "\n",
    "#     # skemming / lemmatization, I will be using lemmatization slower but accurate\n",
    "#     # tokenization + removing stop words + lemmatization\n",
    "#     doc = nlp(text)\n",
    "#     text = [w.lemma_ for w in doc if not w.is_stop]\n",
    "\n",
    "#     # no need to handle emojis\n",
    "\n",
    "#     return text\n",
    "\n",
    "# spell = SpellChecker()\n",
    "\n",
    "# # precompiled regex\n",
    "# CLEAN_RE = re.compile(r\"<.*?>|https?://\\S+|www\\.\\S+|[^a-zA-Z\\s]\")\n",
    "\n",
    "# def clean_data(text):\n",
    "#     # lowercase\n",
    "#     text = text.lower()\n",
    "\n",
    "#     # remove html, urls, and punctuations in one go\n",
    "#     text = CLEAN_RE.sub(\" \", text)\n",
    "\n",
    "#     # optional: fast spell correction (way faster than TextBlob)\n",
    "#     words = text.split()\n",
    "#     corrected = [spell.correction(w) or w for w in words]\n",
    "#     text = \" \".join(corrected)\n",
    "\n",
    "#     # spacy pipeline: tokenization + stopword removal + lemmatization\n",
    "#     doc = nlp(text)\n",
    "#     return [token.lemma_ for token in doc if not token.is_stop and token.lemma_.strip()]\n",
    "\n",
    "# # sent = df['text'][0]\n",
    "# # sent = '<h1>This is me </h1>'\n",
    "# # sent = 'www.abc.com'\n",
    "# sent = 'I am a good plyer'\n",
    "# print(clean_data(sent))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e38cab1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.241725Z",
     "iopub.status.busy": "2025-08-18T01:30:01.241421Z",
     "iopub.status.idle": "2025-08-18T01:30:01.244956Z",
     "shell.execute_reply": "2025-08-18T01:30:01.244250Z"
    },
    "papermill": {
     "duration": 0.012693,
     "end_time": "2025-08-18T01:30:01.246258",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.233565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df['text'] = df['text'].apply(clean_data)\n",
    "# df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d581aa4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.262026Z",
     "iopub.status.busy": "2025-08-18T01:30:01.261681Z",
     "iopub.status.idle": "2025-08-18T01:30:01.265447Z",
     "shell.execute_reply": "2025-08-18T01:30:01.264610Z"
    },
    "papermill": {
     "duration": 0.013406,
     "end_time": "2025-08-18T01:30:01.266933",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.253527",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# df.to_csv('pre_processed.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cc2e80b",
   "metadata": {
    "papermill": {
     "duration": 0.006807,
     "end_time": "2025-08-18T01:30:01.281413",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.274606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Text Representation\n",
    "## Popular method\n",
    "* One-Hot-Encoding : Easy to implement but have many problems\n",
    "* Bag-of-Words : A better approach which solve many problems related to One-Hot-Encoder\n",
    "* N-Grams : Superset of BOW, instead of one word at a time, takes N words.\n",
    "* TF-IDF : Alternative to BOW, preservs a better semantic information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2cd47404",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:01.298337Z",
     "iopub.status.busy": "2025-08-18T01:30:01.297982Z",
     "iopub.status.idle": "2025-08-18T01:30:02.029246Z",
     "shell.execute_reply": "2025-08-18T01:30:02.028019Z"
    },
    "papermill": {
     "duration": 0.741506,
     "end_time": "2025-08-18T01:30:02.031142",
     "exception": false,
     "start_time": "2025-08-18T01:30:01.289636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                                                    text  label\n",
       " 11899  ['see', 'recently', 'aware', 'number', 'year',...      0\n",
       " 16400  ['s', 'right', 'average', 'maybe', 's', 'origi...      1\n",
       " 14039  ['take', 'special', 'kind', 'person', 'movie',...      0\n",
       " 3667   ['sweet', 'sixteen', 'minute', 'director', 'ji...      1\n",
       " 7883   ['thing', 'wrong', 'movie', 'begin', 'minute',...      1,\n",
       " Index(['text', 'label'], dtype='object'))"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading the processed data\n",
    "df = pd.read_csv('/kaggle/input/processed-imdb-reviews/pre_processed.csv')\n",
    "df = df.drop('Unnamed: 0', axis=1)\n",
    "df.sample(5), df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5c06d8dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:02.046854Z",
     "iopub.status.busy": "2025-08-18T01:30:02.046537Z",
     "iopub.status.idle": "2025-08-18T01:30:07.376521Z",
     "shell.execute_reply": "2025-08-18T01:30:07.375588Z"
    },
    "papermill": {
     "duration": 5.339603,
     "end_time": "2025-08-18T01:30:07.377973",
     "exception": false,
     "start_time": "2025-08-18T01:30:02.038370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16295    [unfortunately, rating, chosen, movie, lack, s...\n",
       "3975     [strange, cerebral, surreal, esoteric, film, t...\n",
       "2199     [classic, film, late, s, haven, t, retain, abi...\n",
       "6446     [rent, movie, find, realllllllly, suck, family...\n",
       "20853    [movie, rate, roster, fine, actor, special, ef...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text'] = df['text'].apply(ast.literal_eval)\n",
    "df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "55e45f72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.394183Z",
     "iopub.status.busy": "2025-08-18T01:30:07.393874Z",
     "iopub.status.idle": "2025-08-18T01:30:07.397890Z",
     "shell.execute_reply": "2025-08-18T01:30:07.396942Z"
    },
    "papermill": {
     "duration": 0.014316,
     "end_time": "2025-08-18T01:30:07.399602",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.385286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# we don't need to do thi manually\n",
    "# corpus = df['text'].apply(lambda x : ' '.join(x)).to_list()\n",
    "# corpus = ','.join(corpus)\n",
    "# corpus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dce516ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.480554Z",
     "iopub.status.busy": "2025-08-18T01:30:07.480250Z",
     "iopub.status.idle": "2025-08-18T01:30:07.484366Z",
     "shell.execute_reply": "2025-08-18T01:30:07.483450Z"
    },
    "papermill": {
     "duration": 0.078405,
     "end_time": "2025-08-18T01:30:07.486082",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.407677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# we don't need to do thi manually\n",
    "# vocabulary = list(set(corpus.split()))\n",
    "# len(vocabulary)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f76b520",
   "metadata": {
    "papermill": {
     "duration": 0.006856,
     "end_time": "2025-08-18T01:30:07.500296",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.493440",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43207b0a",
   "metadata": {
    "papermill": {
     "duration": 0.007321,
     "end_time": "2025-08-18T01:30:07.514746",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.507425",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## One-Hot Encoding\n",
    "$\\text{To convert this into One-Hot-Encoding we will have to do the following.}$\n",
    "* Label each word in the vocabulary as [1 0 ... 0], [0 1 0 ... 0], ...\n",
    "* This will make our data too much sparse.\n",
    "* Since all the **documents** has different number of words, we will not be able to use this method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "284f4cb3",
   "metadata": {
    "papermill": {
     "duration": 0.006735,
     "end_time": "2025-08-18T01:30:07.528700",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.521965",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n",
    "## Bag of Words\n",
    "To convert this into bag-of-words (BOW) encoding we will have to do the following.\n",
    "* We will give an index to each word in our vocabulary.\n",
    "* Now our every document will be of length `len(vocabulary)` .\n",
    "* We will basically count the number of occurences of each word from 0 to `len(vocabular)`.\n",
    "* If any word is not present then we skip it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "754129fb",
   "metadata": {
    "papermill": {
     "duration": 0.006764,
     "end_time": "2025-08-18T01:30:07.542542",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.535778",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Many text processing steps can be skipped since the sklearn's CountVectorizer does it for us. But there is no harm in doing it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e151b184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.558358Z",
     "iopub.status.busy": "2025-08-18T01:30:07.557611Z",
     "iopub.status.idle": "2025-08-18T01:30:07.707637Z",
     "shell.execute_reply": "2025-08-18T01:30:07.706614Z"
    },
    "papermill": {
     "duration": 0.159942,
     "end_time": "2025-08-18T01:30:07.709488",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.549546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14266    film surprise little watch lot horror ski film...\n",
       "23996    bamboo house doll year give title hong kong ve...\n",
       "6937     s certainly politically incorrect entertain dr...\n",
       "11885    apparently hollywood hand money camera ability...\n",
       "6005     watch film action waste time figurehead ship a...\n",
       "Name: text, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text'] = df['text'].apply(lambda x : ' '.join(x))\n",
    "df['text'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7987025b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.726593Z",
     "iopub.status.busy": "2025-08-18T01:30:07.726302Z",
     "iopub.status.idle": "2025-08-18T01:30:07.729946Z",
     "shell.execute_reply": "2025-08-18T01:30:07.729320Z"
    },
    "papermill": {
     "duration": 0.013566,
     "end_time": "2025-08-18T01:30:07.731237",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.717671",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "# vectorizer = CountVectorizer()\n",
    "\n",
    "# X = vectorizer.fit_transform(df['text'])\n",
    "\n",
    "# print(vectorizer.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fae3e165",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.746854Z",
     "iopub.status.busy": "2025-08-18T01:30:07.746559Z",
     "iopub.status.idle": "2025-08-18T01:30:07.750606Z",
     "shell.execute_reply": "2025-08-18T01:30:07.749640Z"
    },
    "papermill": {
     "duration": 0.013589,
     "end_time": "2025-08-18T01:30:07.752110",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.738521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X = X.toarray() # out input data is ready in R^{d} form\n",
    "# print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9314744a",
   "metadata": {
    "papermill": {
     "duration": 0.006985,
     "end_time": "2025-08-18T01:30:07.766419",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.759434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can use CountVectorizer to create BOW as well as N-gram representation for us."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3a7b77d",
   "metadata": {
    "papermill": {
     "duration": 0.006825,
     "end_time": "2025-08-18T01:30:07.780342",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.773517",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## TF-IDF representation\n",
    "To convert this into TF-IDF encoding we will have to do the following.\n",
    "\n",
    "* we will have represention vector for each document of size `len(vocabular`.\n",
    "* We will calculate the tf-idf of every word in vocabulary for each document."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "70ed7273",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:07.796685Z",
     "iopub.status.busy": "2025-08-18T01:30:07.796409Z",
     "iopub.status.idle": "2025-08-18T01:30:17.816961Z",
     "shell.execute_reply": "2025-08-18T01:30:17.815853Z"
    },
    "papermill": {
     "duration": 10.031172,
     "end_time": "2025-08-18T01:30:17.818665",
     "exception": false,
     "start_time": "2025-08-18T01:30:07.787493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "tf_vectorizer = TfidfVectorizer()\n",
    "X2 = tf_vectorizer.fit_transform(df['text'])\n",
    "X2 = X2.toarray()\n",
    "print(X2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2f275e64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:17.835308Z",
     "iopub.status.busy": "2025-08-18T01:30:17.834990Z",
     "iopub.status.idle": "2025-08-18T01:30:17.841046Z",
     "shell.execute_reply": "2025-08-18T01:30:17.839802Z"
    },
    "papermill": {
     "duration": 0.016224,
     "end_time": "2025-08-18T01:30:17.842480",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.826256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.076753433801274\n"
     ]
    }
   ],
   "source": [
    "print(X2[0].sum()) # so there are values in between"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53fbc264",
   "metadata": {
    "papermill": {
     "duration": 0.00716,
     "end_time": "2025-08-18T01:30:17.857123",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.849963",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4d3b2b8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:17.873322Z",
     "iopub.status.busy": "2025-08-18T01:30:17.872582Z",
     "iopub.status.idle": "2025-08-18T01:30:17.899409Z",
     "shell.execute_reply": "2025-08-18T01:30:17.898462Z"
    },
    "papermill": {
     "duration": 0.036539,
     "end_time": "2025-08-18T01:30:17.900993",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.864454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15924</th>\n",
       "      <td>surprise people tell gory talk shit film slow ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15579</th>\n",
       "      <td>huge hit release australian audience funny tod...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18077</th>\n",
       "      <td>go see movie bit skeptical fantasy movie cup t...</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21087</th>\n",
       "      <td>weak movie mainly poor story poor act case rob...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10833</th>\n",
       "      <td>level high expectation sit watch comedy cast h...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    text  label\n",
       "15924  surprise people tell gory talk shit film slow ...      1\n",
       "15579  huge hit release australian audience funny tod...      1\n",
       "18077  go see movie bit skeptical fantasy movie cup t...     -1\n",
       "21087  weak movie mainly poor story poor act case rob...      1\n",
       "10833  level high expectation sit watch comedy cast h...      1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'] = df['label'].apply(lambda x : -1 if x == 0 else 1)\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d22ee585",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:17.917746Z",
     "iopub.status.busy": "2025-08-18T01:30:17.917463Z",
     "iopub.status.idle": "2025-08-18T01:30:17.922887Z",
     "shell.execute_reply": "2025-08-18T01:30:17.922050Z"
    },
    "papermill": {
     "duration": 0.015409,
     "end_time": "2025-08-18T01:30:17.924265",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.908856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1  1  1 ...  1  1 -1]\n"
     ]
    }
   ],
   "source": [
    "Y = df['label'].values\n",
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ebd0fe29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:17.941558Z",
     "iopub.status.busy": "2025-08-18T01:30:17.941265Z",
     "iopub.status.idle": "2025-08-18T01:30:17.946181Z",
     "shell.execute_reply": "2025-08-18T01:30:17.945271Z"
    },
    "papermill": {
     "duration": 0.015058,
     "end_time": "2025-08-18T01:30:17.947617",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.932559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total rows after TF-IDF  25000\n",
      "Representation size of each document TF-IDF  41824\n",
      "Total rows in labels  25000\n"
     ]
    }
   ],
   "source": [
    "# print(\"Total rows after BOW \", len(X))\n",
    "# print(\"Representation size of each document after BOW \", len(X[0]))\n",
    "print(\"Total rows after TF-IDF \", len(X2))\n",
    "print(\"Representation size of each document TF-IDF \", len(X2[0]))\n",
    "print(\"Total rows in labels \", len(Y))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526900ca",
   "metadata": {
    "papermill": {
     "duration": 0.007784,
     "end_time": "2025-08-18T01:30:17.963189",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.955405",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* The actual vocabulary is of size around ~63k, but it is here ~42k because during the procedure, words with less frequency were removed.\n",
    "* There is a threshold which we can pass to control the frequency."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d388f1de",
   "metadata": {
    "papermill": {
     "duration": 0.008461,
     "end_time": "2025-08-18T01:30:17.979445",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.970984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "39a2cf8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:17.996524Z",
     "iopub.status.busy": "2025-08-18T01:30:17.996226Z",
     "iopub.status.idle": "2025-08-18T01:30:18.009104Z",
     "shell.execute_reply": "2025-08-18T01:30:18.007968Z"
    },
    "papermill": {
     "duration": 0.023253,
     "end_time": "2025-08-18T01:30:18.010853",
     "exception": false,
     "start_time": "2025-08-18T01:30:17.987600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "-1    12500\n",
       " 1    12500\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6550f01d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:18.027787Z",
     "iopub.status.busy": "2025-08-18T01:30:18.027438Z",
     "iopub.status.idle": "2025-08-18T01:30:18.240749Z",
     "shell.execute_reply": "2025-08-18T01:30:18.239939Z"
    },
    "papermill": {
     "duration": 0.223335,
     "end_time": "2025-08-18T01:30:18.242236",
     "exception": false,
     "start_time": "2025-08-18T01:30:18.018901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df, x='label')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ee78e53",
   "metadata": {
    "papermill": {
     "duration": 0.00749,
     "end_time": "2025-08-18T01:30:18.257968",
     "exception": false,
     "start_time": "2025-08-18T01:30:18.250478",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The labels are equally distributed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a96c3c3e",
   "metadata": {
    "papermill": {
     "duration": 0.007847,
     "end_time": "2025-08-18T01:30:18.273657",
     "exception": false,
     "start_time": "2025-08-18T01:30:18.265810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8cd68ef5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:18.291149Z",
     "iopub.status.busy": "2025-08-18T01:30:18.290811Z",
     "iopub.status.idle": "2025-08-18T01:30:23.322903Z",
     "shell.execute_reply": "2025-08-18T01:30:23.321490Z"
    },
    "papermill": {
     "duration": 5.042697,
     "end_time": "2025-08-18T01:30:23.324796",
     "exception": false,
     "start_time": "2025-08-18T01:30:18.282099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X2, Y, test_size=0.2, random_state=42\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0e6cf33f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.344940Z",
     "iopub.status.busy": "2025-08-18T01:30:23.344072Z",
     "iopub.status.idle": "2025-08-18T01:30:23.349178Z",
     "shell.execute_reply": "2025-08-18T01:30:23.348125Z"
    },
    "papermill": {
     "duration": 0.016415,
     "end_time": "2025-08-18T01:30:23.350750",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.334335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X2_train, X2_test, y2_train, y2_test = train_test_split(\n",
    "#     X2, Y, test_size=0.2, random_state=42\n",
    "# )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2f2bf83e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.368487Z",
     "iopub.status.busy": "2025-08-18T01:30:23.368154Z",
     "iopub.status.idle": "2025-08-18T01:30:23.373603Z",
     "shell.execute_reply": "2025-08-18T01:30:23.372654Z"
    },
    "papermill": {
     "duration": 0.015883,
     "end_time": "2025-08-18T01:30:23.375045",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.359162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train size: 20000\n",
      "Test size: 5000\n",
      "Training labels:\n",
      " [-1  1  1 ... -1 -1  1]\n"
     ]
    }
   ],
   "source": [
    "print(\"Train size:\", len(X_train))\n",
    "print(\"Test size:\", len(X_test))\n",
    "print(\"Training labels:\\n\", y_train)\n",
    "\n",
    "# print(\"Train size:\", len(X2_train))\n",
    "# print(\"Test size:\", len(X2_test))\n",
    "# print(\"Training labels:\\n\", y2_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "383daae1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.395225Z",
     "iopub.status.busy": "2025-08-18T01:30:23.394873Z",
     "iopub.status.idle": "2025-08-18T01:30:23.560876Z",
     "shell.execute_reply": "2025-08-18T01:30:23.559963Z"
    },
    "papermill": {
     "duration": 0.178367,
     "end_time": "2025-08-18T01:30:23.562978",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.384611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "values, counts = np.unique(y_train, return_counts=True)\n",
    "\n",
    "plt.bar(values, counts)\n",
    "plt.xlabel(\"Number\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Frequency of Numbers in Vector\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "292224a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.585356Z",
     "iopub.status.busy": "2025-08-18T01:30:23.585009Z",
     "iopub.status.idle": "2025-08-18T01:30:23.591249Z",
     "shell.execute_reply": "2025-08-18T01:30:23.590348Z"
    },
    "papermill": {
     "duration": 0.019172,
     "end_time": "2025-08-18T01:30:23.592824",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.573652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([-1,  1]), array([ 9971, 10029]))"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "values, counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1335d655",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.614594Z",
     "iopub.status.busy": "2025-08-18T01:30:23.614300Z",
     "iopub.status.idle": "2025-08-18T01:30:23.618253Z",
     "shell.execute_reply": "2025-08-18T01:30:23.617370Z"
    },
    "papermill": {
     "duration": 0.014886,
     "end_time": "2025-08-18T01:30:23.619756",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.604870",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# values, counts = np.unique(y2_train, return_counts=True)\n",
    "\n",
    "# plt.bar(values, counts)\n",
    "# plt.xlabel(\"Number\")\n",
    "# plt.ylabel(\"Count\")\n",
    "# plt.title(\"Frequency of Numbers in Vector\")\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dc48642d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.641244Z",
     "iopub.status.busy": "2025-08-18T01:30:23.640873Z",
     "iopub.status.idle": "2025-08-18T01:30:23.644902Z",
     "shell.execute_reply": "2025-08-18T01:30:23.644225Z"
    },
    "papermill": {
     "duration": 0.016382,
     "end_time": "2025-08-18T01:30:23.646272",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.629890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(values, counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00023051",
   "metadata": {
    "papermill": {
     "duration": 0.008219,
     "end_time": "2025-08-18T01:30:23.663107",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.654888",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since train have similar distribution and initially they were equal thus test will also have equal distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b1fb441",
   "metadata": {
    "papermill": {
     "duration": 0.008385,
     "end_time": "2025-08-18T01:30:23.679952",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.671567",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Part E"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d93afe66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.699255Z",
     "iopub.status.busy": "2025-08-18T01:30:23.698894Z",
     "iopub.status.idle": "2025-08-18T01:30:23.741053Z",
     "shell.execute_reply": "2025-08-18T01:30:23.740252Z"
    },
    "papermill": {
     "duration": 0.054052,
     "end_time": "2025-08-18T01:30:23.742618",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.688566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "# from numpy.lib.stride_tricks import as_strided\n",
    "\n",
    "# def batched_view(X_train, y_train, batch_size):\n",
    "#     \"\"\"\n",
    "#     Create a zero-copy view of `arr` grouped into batches of size `batch_size`.\n",
    "#     Drops the last incomplete batch.\n",
    "#     \"\"\"\n",
    "#     n_batches = len(X_train) // batch_size  # how many full batches\n",
    "#     new_shape = (n_batches, batch_size) + arr.shape[1:]   # (batches, batch_size, features...)\n",
    "#     new_strides = (batch_size * X_train.strides[0],) + X_train.strides\n",
    "    \n",
    "#     return as_strided(X_train, shape=new_shape, strides=new_strides), as_strided(y_train, shape=new_shape, strides=new_strides)\n",
    "\n",
    "def train_perceptron(X_train, y_train, X_test, y_test, n_epochs=1000):\n",
    "    # X_train = np.hstack([X_train, np.ones((len(X_train), 1), dtype=int)])\n",
    "    # weight initialization\n",
    "    W = np.zeros(len(X_train[0]) + 1)\n",
    "\n",
    "    train_accs = []\n",
    "    test_accs = []\n",
    "    losses = []\n",
    "    \n",
    "    pbar = tqdm(range(n_epochs))\n",
    "    for epoch in pbar:\n",
    "\n",
    "        # training\n",
    "        total_corr = 0\n",
    "        total_loss = 0\n",
    "        for i in range(len(X_train)):\n",
    "            x = np.append(X_train[i], 1)\n",
    "            y_pred = np.dot(x, W)\n",
    "\n",
    "            y_pred = -1 if y_pred < 0 else 1\n",
    "            \n",
    "            if y_pred != y_train[i]:\n",
    "                W += np.dot(x, y_train[i])\n",
    "                total_loss += ((y_pred - y_train[i])**2) / len(X_train)\n",
    "            else:\n",
    "                total_corr += 1\n",
    "\n",
    "        train_acc = (total_corr / len(y_train)) * 100\n",
    "        train_accs.append(train_acc)\n",
    "        losses.append(total_loss)\n",
    "\n",
    "        # testing\n",
    "        test_corr = 0\n",
    "        for i in range(len(X_test)):\n",
    "            x = np.append(X_test[i], 1)\n",
    "            \n",
    "            y_pred = np.dot(x, W)\n",
    "\n",
    "            if y_pred != y_test[i]:\n",
    "                test_corr += 1\n",
    "\n",
    "        test_acc = (test_corr / len(y_test)) * 100\n",
    "        test_accs.append(test_acc)\n",
    "\n",
    "        pbar.set_postfix({\"loss\": total_loss, \"training accuracy\" : train_acc, \"testing accuracy\" : test_acc})\n",
    "\n",
    "        if total_corr == len(y_train):\n",
    "            print(\"Training Converged\")\n",
    "            break\n",
    "\n",
    "    return losses, train_accs, test_accs\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "34968e50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:30:23.761114Z",
     "iopub.status.busy": "2025-08-18T01:30:23.760769Z",
     "iopub.status.idle": "2025-08-18T01:31:33.673098Z",
     "shell.execute_reply": "2025-08-18T01:31:33.671461Z"
    },
    "papermill": {
     "duration": 69.924207,
     "end_time": "2025-08-18T01:31:33.675376",
     "exception": false,
     "start_time": "2025-08-18T01:30:23.751169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  4%|▍         | 45/1000 [01:09<24:43,  1.55s/it, loss=0, training accuracy=100, testing accuracy=100]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Converged\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# BOW training\n",
    "l1, tr1, ts1 = train_perceptron(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6ceaeac3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T01:31:33.704104Z",
     "iopub.status.busy": "2025-08-18T01:31:33.703756Z",
     "iopub.status.idle": "2025-08-18T01:31:34.103727Z",
     "shell.execute_reply": "2025-08-18T01:31:34.102716Z"
    },
    "papermill": {
     "duration": 0.41674,
     "end_time": "2025-08-18T01:31:34.105703",
     "exception": false,
     "start_time": "2025-08-18T01:31:33.688963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "epochs = np.arange(1, len(l1) + 1)\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Loss subplot\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(epochs, l1, color=\"red\", linewidth=2)\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.title(\"Training Loss\")\n",
    "plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
    "\n",
    "# Accuracy subplot\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(epochs, tr1, label=\"Train Accuracy\", color=\"blue\", linewidth=2)\n",
    "plt.plot(epochs, ts1, label=\"Test Accuracy\", color=\"green\", linewidth=2)\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Training vs Testing Accuracy\")\n",
    "plt.legend()\n",
    "plt.grid(True, linestyle=\"--\", alpha=0.6)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbd97de1",
   "metadata": {
    "papermill": {
     "duration": 0.013629,
     "end_time": "2025-08-18T01:31:34.133923",
     "exception": false,
     "start_time": "2025-08-18T01:31:34.120294",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data is not lineary seperable completely. The accuracy stopped increasing at some point."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8062256,
     "sourceId": 12753488,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8085842,
     "sourceId": 12789244,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 103.160972,
   "end_time": "2025-08-18T01:31:35.473073",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T01:29:52.312101",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
